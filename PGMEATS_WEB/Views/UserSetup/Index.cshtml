@model PGMEATS_WEB.Models.clsUserSetup
@{
    ViewBag.MasterRoot = "Master";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div id="content">
    <section id="widget-grid" class="">
        <div class="row">
            <article class="col-xs-12 col-md-12">
                <div class="jarviswidget jarviswidget-color-red" id="wid-id-1"
                     data-widget-colorbutton="false"
                     data-widget-editbutton="false"
                     data-widget-togglebutton="false"
                     data-widget-deletebutton="false"
                     data-widget-custombutton="false"
                     data-widget-collapsed="false"
                     data-widget-sortable="false">

                    <header style="border-top-left-radius:8px; border-top-right-radius:8px">
                        <h2 style="font-family:'Poppins';font-weight:500;font-size:13px">User Setup</h2>
                    </header>

                    <div style="border-bottom-left-radius:8px; border-bottom-right-radius:8px">
                        <div class="widget-body">
                            @Html.ValidationSummary(true)

                            <div class="table-toolbar" style="padding-bottom:10px">
                                <table>
                                    <tr>
                                        <td>
                                            @if (ViewBag.AllowUpdate == "0")
                                            {
                                                <div style="padding-left:-10px"></div>
                                                <button id="btnAdd" class="btn btn-save" style="width:85px;" type="button" data-toggle="modal" data-target="#myModal" value="New" disabled onclick="AddNewData()">
                                                    <span style="font-size:13px">New</span>
                                                </button>
                                            }
                                            else
                                            {
                                                <div style="padding-left:-10px"></div>
                                                <button id="btnAdd" class="btn btn-save" style="width:85px;" type="button" data-toggle="modal" data-target="#myModal" value="New" onclick="AddNewData()">
                                                    <span style="font-size:13px">New</span>
                                                </button>
                                            }
                                        </td>
                                    </tr>
                                </table>
                            </div>

                            <table id="tableID" data-page-size='3' class="table table-striped table-bordered table-hover">
                                <thead>
                                    <tr role="row">
                                        <th style="text-align:center;width:50px;">
                                            Action
                                        </th>
                                        <th style="text-align:center;width:100px;">
                                            User ID
                                        </th>
                                        <th style="text-align:center;width:200px;">
                                            Full Name
                                        </th>
                                        <th style="text-align:center;width:200px;">
                                            Email
                                        </th>
                                        <th style="text-align:center;width:100px;">
                                            Receive Notification
                                        </th>
                                        <th style="text-align:center;width:100px;">
                                            Department
                                        </th>
                                        <th style="text-align:center;width:50px;">
                                            UserType
                                        </th>
                                        <th style="text-align:center;width:50px;">
                                            Admin Status
                                        </th>
                                        <th style="text-align:center;width:100px;">
                                            Last User
                                        </th>
                                        <th style="text-align:center;width:100px;">
                                            Last Update
                                        </th>
                                    </tr>
                                </thead>

                                <tbody></tbody>
                            </table>

                            @*Create A Popup Modal*@
                            <div class="modal fade" id="MyModal">
                                <div class="modal-dialog" style="width:400px">
                                    <div class="modal-content">

                                        <div class="modal-header">
                                            <a href="#" class="close" data-dismiss="modal">&times;</a>
                                            <h4 style="font-family:'Poppins'" id="ModalTitle"></h4>
                                        </div>

                                        <div class="modal-body">
                                            <form id="form" class="smart-form">
                                                <fieldset id="SubmitForm">
                                                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                                                    <table style="border:0px solid black; width:100%">
                                                        <tr>
                                                            <td>
                                                                <div class="form-group ">
                                                                    <label style="font-weight:500" for="UserID">User ID</label>
                                                                    @Html.TextBoxFor(m => m.UserID, new { @id = "UserID", @class = "form-control input-md", placeholder = "Enter user id", required = "required", @style = "height:20px; width:150px" })
                                                                    @Html.ValidationMessageFor(m => m.UserID, "", new { @class = "text-danger" })
                                                                </div>
                                                            </td>
                                                        </tr>
                                                        <tr>
                                                            <td>
                                                                <div class="form-group">
                                                                    <label style="font-weight:500" for="FullName">Full Name</label>
                                                                    @Html.TextBoxFor(m => m.UserName, new { @id = "UserName", @class = "form-control input-md", placeholder = "Enter full name", required = "required", @style = "height:20px; width:300px" })
                                                                    @Html.ValidationMessageFor(m => m.UserName, "", new { @class = "text-danger" })
                                                                </div>
                                                            </td>
                                                        </tr>
                                                        <tr>
                                                            <td>
                                                                <div class="form-group">
                                                                    <label style="font-weight:500" for="Email">Email</label>
                                                                    @Html.TextBoxFor(m => m.Email, new { @id = "Email", @class = "form-control input-md", placeholder = "Enter Email", required = "required", @style = "height:20px; width:300px" })
                                                                    @Html.ValidationMessageFor(m => m.Email, "", new { @class = "text-danger" })
                                                                </div>
                                                            </td>
                                                        </tr>
                                                        <tr>
                                                            <td>
                                                                <div class="form-group">
                                                                    <label style="font-weight:500" for="Department">Department</label>
                                                                    @Html.DropDownList("Department", new SelectList(string.Empty, "Value", "Text"), "", new { @id = "Department", required = "required", @class = "form-control input-md", @style = "height:20px; width:150px" })
                                                                    @Html.ValidationMessageFor(m => m.Department, "", new { @class = "text-danger" })
                                                                </div>
                                                            </td>
                                                            <td>&nbsp;</td>
                                                        </tr>
                                                        <tr>
                                                            <td>
                                                                <div class="form-group">
                                                                    <label style="font-weight:500" for="Password">Password</label>
                                                                    @Html.Hidden("lastPassword", new { id = "lastPassword" })
                                                                    @Html.PasswordFor(m => m.Password, new { @id = "Password", @class = "form-control input-md password", placeholder = "Enter Password", @required = "required", @style = "height:20px; width:150px" })
                                                                    <div id="hdn" style="display:none"></div>
                                                                    <div>
                                                                        <input type="checkbox" id="showHide" />
                                                                        <span id="showHide" style="font-family:'Poppins'">show password</span>
                                                                    </div>
                                                                </div>
                                                            </td>
                                                        </tr>
                                                        <tr>
                                                            <td>
                                                                <div class="form-group">
                                                                    <label style="font-weight:500" for="AdminStatus">Admin Status</label>
                                                                    @Html.DropDownList("AdminStatus", new SelectList(string.Empty, "Value", "Text"), "", new { @id = "AdminStatus", required = "required", @class = "form-control input-md", @style = "height:20px; width:150px" })
                                                                    @Html.ValidationMessageFor(m => m.AdminStatus, "", new { @class = "text-danger" })
                                                                </div>
                                                            </td>
                                                            <td>&nbsp;</td>
                                                        </tr>
                                                        <tr>
                                                            <td>
                                                                <div class="form-group">
                                                                    <label style="font-weight:500" for="UserType">User Type</label>
                                                                    @Html.DropDownList("UserType", new SelectList(string.Empty, "Value", "Text"), "", new { @id = "UserType", required = "required", @class = "form-control input-md", @style = "height:20px; width:150px" })
                                                                    @Html.ValidationMessageFor(m => m.UserType, "", new { @class = "text-danger" })
                                                                </div>
                                                            </td>
                                                            <td>&nbsp;</td>
                                                        </tr>
                                                        <tr>
                                                            <td>
                                                                <div class="form-group">
                                                                    <label style="font-weight:500" for="CatererID">Caterer ID</label>
                                                                    @Html.DropDownList("CatererID", new SelectList(string.Empty, "Value", "Text"), "", new { @id = "CatererID", required = "required", @class = "form-control input-md", @style = "height:20px; width:300px" })
                                                                </div>
                                                            </td>
                                                            <td>&nbsp;</td>
                                                        </tr>
                                                        <tr>
                                                            <td>
                                                                <div class="form-group">
                                                                    <label style="font-weight:500" for="ReceiveNotification">Receive Notification</label>
                                                                    <input type="checkbox" id="chxReceiveNotification" />
                                                                </div>
                                                            </td>
                                                            <td>&nbsp;</td>
                                                        </tr>
                                                        <tr>
                                                            <td>
                                                                <div class="form-group">
                                                                    <label style="font-weight:500" for="lockstatus">Lock Status</label>
                                                                    <input type="checkbox" id="lockstatus" value="0" />
                                                                </div>
                                                            </td>
                                                            <td>&nbsp;</td>
                                                        </tr>
                                                    </table>
                                                </fieldset>
                                            </form>
                                        </div>

                                        <div class="modal-footer">
                                            @if (ViewBag.AllowUpdate == "0")
                                            {
                                                <button type="button" class="btn btn-save" id="InsertData" style="width:85px; font-size:13px" disabled>Save</button>
                                                <button type="button" class="btn btn-save" id="UpdateData" style="width:85px; font-size:13px; display:none;" disabled>Update</button>
                                            }
                                            else
                                            {
                                                <button type="button" class="btn btn-save" id="InsertData" style="width:85px; font-size:13px">Save</button>
                                                <button type="button" class="btn btn-save" id="UpdateData" style="width:85px; font-size:13px; display:none;">Update</button>
                                            }
                                            <button type="button" class="btn btn-default" data-dismiss="modal" style="width:85px; font-size:13px" onclick="return clearTextBox()">Close</button>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div class="modal fade" id="DeleteConfirmation">
                                <div class="modal-dialog">
                                    <div class="modal-content">
                                        <div class="modal-header">
                                            <a href="#" class="close" data-dismiss="modal">&times;</a>
                                            <h4 style="font-family:'Poppins'">Delete Data User Setup</h4>
                                        </div>
                                        <div class="modal-body">
                                            <h4 style="font-family:'Poppins'">Are You Sure? You Want To Delete Data.</h4>
                                        </div>
                                        <div class="modal-footer">
                                            <a href="#" class="btn btn-default" style="width:85px; font-size:13px" data-dismiss="modal" id="CancelDelete">Cancel</a>
                                            <a href="#" class="btn btn-save" style="width:85px; font-size:13px" id="ConfirmDelete">Confirm</a>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </article>
        </div>
    </section>
</div>
<style type="text/css">
    a.disable {
        cursor: not-allowed;
    }

    .hidden {
        display: none;
    }

    .txtAlignCenter {
        text-align: center;
    }

    .txtAlignLeft {
        text-align: left;
    }

    .txtAlignRight {
        text-align: right;
    }

    .btn-save {
        color: #fff;
        background-color: #4CBFBC;
        border-color: #4CBFBC;
    }
</style>

<script src="~/Scripts/plugin/bootstrap-waitingfor/bootstrap-waitingfor.min.js"></script>
<script src="~/Scripts/jquery-1.10.2.min.js"></script>
<script src="~/Scripts/bootstrap/bootstrap.min.js"></script>
<script>

    // DO NOT REMOVE : GLOBAL FUNCTIONS!
    $(document).ready(function () {
        loadData();

        /* BASIC ;*/
        var responsiveHelper_dt_basic = undefined;
        var breakpointDefinition = {
            tablet: 1024,
            phone: 480
        };

        $("#tableID").dataTable({
            bDestroy: true,
            data: [],
            columns: [
                {
                    "data": "Action", className: "txtAlignCenter", "render": function (data, type, row) {
                        if ('@ViewBag.AllowUpdate' == '0') {
                            return '<a href="#" class="fa fa-user disable"></a> | &nbsp; <a href="#" class="fa fa-pencil disable"></a> &nbsp; | &nbsp; <a class="fa fa-trash-o disable"></a>'
                        } else {
                            return '<a href="#" class="fa fa-user" onclick="Privilege(\'' + row.UserID + '\')" ></a> &nbsp; | &nbsp; <a href="#" class="fa fa-pencil" onclick="EditRecord(\'' + row.UserID + '\')"></a> &nbsp; | &nbsp; <a href="#" class="fa fa-trash-o" onclick="DeleteRecord(\'' + row.UserID + '\')"></a>'
                        }
                    }
                },
                { "data": "UserID", "autoWidth": true, className: "txtAlignLeft" },
                { "data": "UserName", "autoWidth": true, className: "txtAlignLeft" },
                { "data": "Email", "autoWidth": true, className: "txtAlignLeft" },
                { "data": "ReceiveNotification", "autoWidth": true, className: "txtAlignCenter" },
               
                { "data": "Department", "autoWidth": true, className: "txtAlignLeft" },
                { "data": "UserType", "autoWidth": true, className: "txtAlignLeft" },
                { "data": "AdminStatus", "autoWidth": true, className: "txtAlignLeft" },
                { "data": "LastUser", "autoWidth": true, className: "txtAlignLeft" },
                { "data": "LastUpdate", "autoWidth": true, className: "txtAlignCenter" }
            ],
            columnDefs: [{
                'targets': [4],
                'className': 'dt-body-center',
                "mRender": function (data, type, full, meta) {
                    return '<input id="CheckReceiveNotification" type="checkbox" onclick="return false;" ' + (data == '1'  ? ' checked' : '') + '/>';

                }
            },
             ],
            rowCallback: function (row, data) { responsiveHelper_dt_basic.createExpandIcon(row) },
            filter: true,
            info: true,
            ordering: true,
            processing: true,
            retrieve: true,
            bLengthChange: false,
            lengthMenu: [[15, 20, -1], [15, 20, "All"]],
            bFilter: true,
            bSort: true,
            bPaginate: true,
            scrollX: false,
            //scrollX: "100%",
            //scrollY: "350px",
            autoWidth: true,
            preDrawCallback: function () {
                // Initialize the responsive datatables helper once.
                if (!responsiveHelper_dt_basic) {
                    responsiveHelper_dt_basic = new ResponsiveDatatablesHelper($('#tableID'), breakpointDefinition);
                }
            },
            drawCallback: function (oSettings) {
                responsiveHelper_dt_basic.respond();
            }
        });
        /* END BASIC */

        //load datatable function
        function loadData() {
            waitingDialog.show("Please wait retrieving data...");

            $.ajax({
                url: "@Url.Action("GetList", "UserSetup")",
                type: "post",
                dataType: "json"
            }).done(function (result) {
               /* console.log(result);*/
                $("#tableID").DataTable().clear();
                $("#tableID").DataTable().rows.add(result).draw(false);
                setTimeout(function () {
                    waitingDialog.hide();
                }, 1000);

            }).fail(function (jqXHR, textStatus, errorThrown) {
                //toastr.error(jqXHR.status + " : " + jqXHR.responseText, 'Error', { timeOut: 3000, "closeButton": true });
                setTimeout(function () {
                    waitingDialog.hide();
                }, 1000);
            });
        }

        //insert event click
        $("#InsertData").click(function () {
            if ($("#form").valid()) {
                if ($("#UserType").val() == "2" && ($("#CatererID").val() ? $("#CatererID").val() : "") == "") {
                    toastr.warning("Please fill catarerID!", 'Warning', { timeOut: 3000, "closeButton": true });
                    return;
                }

                $('#hdn').css({ display: 'none' });
                var formData = new FormData();
                formData.append("UserID", $("#UserID").val());
                formData.append("UserName", $("#UserName").val());
                formData.append("Email", $("#Email").val());
                formData.append("Password", $("#Password").val());
                formData.append("UserType", $("#UserType").val());
                formData.append("Department", $("#Department").val());
                formData.append("AdminStatus", $("#AdminStatus").val());
                formData.append("CatererID", $("#CatererID").val());
                var lockstatus = "0";
                $("#lockstatus input:checkbox").change(function () {
                    var ischecked = $(this).is(':checked');
                    if (ischecked) {
                        lockstatus = "1";
                    } else {
                        lockstatus = "0";
                    }
                });

                var receiveN = "0";
             
                    var ischecked = $('#chxReceiveNotification').is(':checked');
                  
                    if (ischecked) {
                        receiveN = "1";
                    } else {
                        receiveN = "0";
                    }
            
                //var checkBox = document.getElementById("lockstatus");
                //var lockstatus = "";
                //if (checkBox.checked = true) {
                //    lockstatus = "1";
                //} else {
                //    lockstatus = "0";
                //}
                formData.append("LockStatus", lockstatus);
                formData.append("ReceiveNotification", receiveN);

                $.ajax({
                    type: "Post",
                    url: "@Url.Action("InsertData", "UserSetup")",
                    data: formData,
                    processData: false,
                    contentType: false,
                    success: function (result) {
                        console.log(result);
                        if (result.toLowerCase().includes("success")) {
                            loadData();
                            toastr.success("Data Saved Successfully!", 'Success', { timeOut: 3000, "closeButton": true });
                            $('#MyModal').modal('hide');
                            $('body').removeClass('modal-open');
                            $('.modal-backdrop').remove();
                        } else {
                            toastr.warning(result, 'Warning', { timeOut: 3000, "closeButton": true });
                        }
                    },
                    error: function (jqXHR, error, errorThrown) {
                        toastr.error(jqXHR.status + " : " + jqXHR.responseText, 'Error', { timeOut: 3000, "closeButton": true });
                    }
                })
            } else {
                $('#hdn').css({ display: 'block' });
            }
        });

        //update
        $("#UpdateData").click(function () {
            if ($("#form").valid()) {
                var formData = new FormData();

                formData.append("UserID", $("#UserID").val());
                formData.append("UserName", $("#UserName").val());
                formData.append("Email", $("#Email").val());
                formData.append("Password", $("#Password").val());
                formData.append("UserType", $("#UserType").val());
                formData.append("Department", $("#Department").val());
                formData.append("AdminStatus", $("#AdminStatus").val());
                formData.append("CatererID", $("#CatererID").val());
                formData.append("LastPassword", $("#lastPassword").val());
                var lockstatus = "0";
                $("#lockstatus input:checkbox").change(function () {
                    var ischecked = $(this).is(':checked');                
                    if (ischecked) {
                        lockstatus = "1";
                    } else {
                        lockstatus = "0";
                    }
                });
                var receiveN = "0";
                var ischeckedReceiveNotification = $("#chxReceiveNotification").is(':checked');
                    console.log(ischeckedReceiveNotification)
                    if (ischeckedReceiveNotification) {
                        receiveN = "1";
                    } else {
                        receiveN = "0";
                    }
             

                //var checkBox = document.getElementById("lockstatus");
                //var lockstatus = "0";
                //if (checkBox.checked = true) {
                //    lockstatus = "1";
                //} else {
                //    lockstatus = "0";
                ////}
                //console.log(checkBox.checked);
                
                formData.append("LockStatus", lockstatus);
                formData.append("ReceiveNotification", receiveN);
            
                $.ajax({
                    type: "Post",
                    url: "@Url.Action("UpdateData", "UserSetup")",
                    dataType: "json",
                    data: formData,
                    processData: false,
                    contentType: false,
                    success: function (result) {
                        console.log(result);
                        if (result.toLowerCase().includes("success")) {
                            loadData();
                            toastr.success("Data Update Successfully!", 'Success', { timeOut: 3000, "closeButton": true });
                            $('#MyModal').modal('hide');
                            $('body').removeClass('modal-open');
                            $('.modal-backdrop').remove();
                        } else {
                            toastr.warning(result, 'Warning', { timeOut: 3000, "closeButton": true });
                        }

                        //if (!data.Success) {
                        //    toastr.warning(data.ErrorMessage, 'Warning', { timeOut: 3000, "closeButton": true });
                        //} else {
                        //    toastr.success("Data Update Successfully!", 'Success', { timeOut: 3000, "closeButton": true });
                        //    loadData();
                        //    $('#MyModal').modal('hide');
                        //    $('body').removeClass('modal-open');
                        //    $('.modal-backdrop').remove();
                        //}
                    },
                    error: function (jqXHR, error, errorThrown) {
                        toastr.error(jqXHR.status + " : " + jqXHR.responseText, 'Error', { timeOut: 3000, "closeButton": true });
                        //console.log(data);
                    }
                })
            }
        })

        //confirm delete
        $("#ConfirmDelete").click(function () {
            var UserID = $("#UserID").val();
            var data = $("#SubmitForm").serialize();

            $.ajax({
                type: "Post",
                url: '@Url.Action("DeleteData", "UserSetup")',
                dataType: "json",
                data: data,
                success: function (data) {
                    if (!data.Success) {
                        toastr.warning(data.ErrorMessage, 'Warning', { timeOut: 3000, "closeButton": true });
                        $("#DeleteConfirmation").modal("hide");
                        $("#password").val(result.content.password);
                    }
                    else {
                        toastr.success("Data Delete Successfully!", 'Success', { timeOut: 3000, "closeButton": true });
                        $("#DeleteConfirmation").modal("hide");
                        $(".row_" + UserID).remove();
                        loadData();
                    }
                },
                error: function (jqXHR, error, errorThrown) {
                        toastr.error(jqXHR.status + " : " + jqXHR.responseText, 'Error', { timeOut: 3000, "closeButton": true });
                        //console.log(data);
                    }
            })
        });

    });

    function resetForm() {
        var $form = $('#form');
        $form.validate().resetForm();
        $("#form").find('.form-group').removeClass("state-error");
        $("#form").find('.form-group').removeClass("state-success");
        $("#showHide").prop("checked", false);
        $(".password").attr("type", "password");
    }

    //Show The Popup Modal Add New
    function AddNewData() {
        resetForm();

        FillCombo_Department();
        FillCombo_AdminStatus();
        FillCombo_UserType();

        $("#UserID").val("");
        $("#UserName").val("");
        $("#Email").val("");
        $("#Password").val("");
        $("#ModalTitle").html("Create Data User Setup");
        $("#MyModal").modal();
        $('#InsertData').show();
        $('#UpdateData').hide();
        $(".password").attr("type", "password");
        $("#UserID").prop('readonly', false);
       /* $("#Password").prop('readonly', false);*/
        $("#CatererID").prop('disabled', true);
        $("#CatererID").val("");
        $("#lockstatus").prop('checked', false);
        $("#chxReceiveNotification").prop('checked', false);
    }

    //Show The Popup Modal For Edit
    function EditRecord(User) {
        resetForm();
        $("#ModalTitle").html("Edit Data User Setup");
        $("#MyModal").modal();
        $.ajax({
            type: "GET",
            url: "@Url.Action("GetListByUserID", "UserSetup")", // "/UserSetup/GetListByUserID?",
            cache: false,
            data: ({ UserID: User }),
            success: function (result) {
                if (result.Message.toLowerCase().includes("success")) {
                    $("#UserID").val(result.Content.UserID).prop('readonly', true);
                    $("#Password").val(result.Content.Password);
                    $("#UserName").val(result.Content.UserName);
                    $("#Email").val(result.Content.Email);
                    FillCombo_Department(result.Content.Department);
                    FillCombo_AdminStatus(result.Content.AdminStatus);
                    FillCombo_UserType(result.Content.UserType);
                    $('#InsertData').hide();
                    $('#UpdateData').show();
                    if (result.Content.UserType == "Caterer") {
                        $("#CatererID").prop('disabled', false);
                        FillCombo_CatererID(result.Content.CatererID)
                    } else {
                        $("#CatererID").prop('disabled', true);
                        $("#CatererID").val('');
                    }
                    $("#lastPassword").val(result.Content.Password);
                    var lockstatus = result.Content.LockStatus;
                    var receiveN = result.Content.ReceiveNotification;
                  

                    if (lockstatus == "0") {
                        $("#lockstatus").prop('checked', false);
                    } else {
                        $("#lockstatus").prop('checked', true);
                    }
                    if (receiveN == "0") {
                        $("#chxReceiveNotification").prop('checked', false);
                    } else {
                        $("#chxReceiveNotification").prop('checked', true);
                    }
                } else {
                    toastr.warning(result.Message, 'Warning', { timeOut: 1000, closeButton: true });
                }
            },
            error: function (ex) {
                toastr.error(ex, 'Failed', { timeOut: 1000, "closeButton": true });
            }
        })
    }

    //Show The Popup Modal For DeleteComfirmation
    var DeleteRecord = function (User) {
        $("#UserID").val(User);
        $("#DeleteConfirmation").modal("show");
    }

    function Privilege(UserID) {
      /*  window.location.href = "MyPGM_Web/UserPrivilege/Index?UserID=" + UserID;*/
        window.location.href = "/MyPGM_Web/UserSetup/UserPrivilege?UserID=" + UserID +"";
    }

    //Function for clearing the textboxes
    function clearTextBox() {
        resetForm();
        //PopulateUserGroup();
        $("#UserID").val();
        $("#UserName").val();
        $('#UpdateData').hide();
        $('#InsertData').show();
        $('#myModal').show();
        $("#UserID").prop('readonly', false);
        $("#CatererID").prop('disabled', true);
        $("#CatererID").val("");
    }

    $("#showHide").click(function () {
        if ($(".password").attr("type") == "password") {
            $(".password").attr("type", "text");
        } else {
            $(".password").attr("type", "password");
        }
    });

    function FillCombo_Department(Department) {
        $.ajax({
            type: "GET",
            url: "@Url.Action("FillCombo", "UserSetup")", //"/MyKY/FillCombo/",
            datatype: 'json',
            data: { TypeAction : "01" },
            success: function (result) {
                if (result.Message.toLowerCase().includes("success")) {
                    $('#Department').empty();
                    $.each(result.Content, function (i, dt) {
                        if (dt.CodeDesc == Department) {
                            $("#Department").append('<option value="' + dt.Code + '" selected>' + dt.CodeDesc + '</option>');
                        } else {
                            $("#Department").append('<option value="' + dt.Code + '">' + dt.CodeDesc + '</option>');
                        }
                    });
                } else {
                    toastr.warning(result.Message, 'Warning', { timeOut: 1000, closeButton: true });
                }
            },
            error: function (ex) {
                toastr.error(ex, 'Failed', { timeOut: 1000, "closeButton": true });
            }
        });
    }

    function FillCombo_AdminStatus(AdminStatus) {
        $.ajax({
            type: "GET",
            url: "@Url.Action("FillCombo", "UserSetup")", //"/MyKY/FillCombo/",
            datatype: 'json',
            data: { TypeAction: "02" },
            success: function (result) {
                if (result.Message.toLowerCase().includes("success")) {
                    $('#AdminStatus').empty();
                    $.each(result.Content, function (i, dt) {
                        if (dt.CodeDesc == AdminStatus) {
                            $("#AdminStatus").append('<option value="' + dt.Code + '" selected>' + dt.CodeDesc + '</option>');
                        } else {
                            $("#AdminStatus").append('<option value="' + dt.Code + '">' + dt.CodeDesc + '</option>');
                        }
                    });
                } else {
                    toastr.warning(result.Message, 'Warning', { timeOut: 1000, closeButton: true });
                }
            },
            error: function (ex) {
                toastr.error(ex, 'Failed', { timeOut: 1000, "closeButton": true });
            }
        });
    }

    function FillCombo_UserType(UserType) {
        $.ajax({
            type: "GET",
            url: "@Url.Action("FillCombo", "UserSetup")", //"/MyKY/FillCombo/",
            datatype: 'json',
            data: { TypeAction: "03" },
            success: function (result) {
                if (result.Message.toLowerCase().includes("success")) {
                    $('#UserType').empty();
                    $.each(result.Content, function (i, dt) {
                        if (dt.CodeDesc == UserType) {
                            $("#UserType").append('<option value="' + dt.Code + '" Selected>' + dt.CodeDesc + '</option>');
                        } else {
                            $("#UserType").append('<option value="' + dt.Code + '">' + dt.CodeDesc + '</option>');
                        }
                    });
                } else {
                    toastr.warning(result.Message, 'Warning', { timeOut: 1000, closeButton: true });
                }
            },
            error: function (ex) {
                toastr.error(ex, 'Failed', { timeOut: 1000, "closeButton": true });
            }
        });
    }

    function FillCombo_CatererID(CatererID) {
        $.ajax({
            type: "GET",
            url: "@Url.Action("FillCombo", "UserSetup")", //"/MyKY/FillCombo/",
            datatype: 'json',
            data: { TypeAction: "04" },
            success: function (result) {
                if (result.Message.toLowerCase().includes("success")) {
                    $('#CatererID').empty();
                    $.each(result.Content, function (i, dt) {
                        if (dt.CodeDesc == CatererID) {
                            $("#CatererID").append('<option value="' + dt.Code + '" selected>' + dt.CodeDesc + '</option>');
                        } else {
                            $("#CatererID").append('<option value="' + dt.Code + '">' + dt.CodeDesc + '</option>');
                        }
                    });
                } else {
                    toastr.warning(result.Message, 'Warning', { timeOut: 1000, closeButton: true });
                }
            },
            error: function (ex) {
                toastr.error(ex, 'Failed', { timeOut: 1000, "closeButton": true });
            }
        });
    }

    $("#UserType").change(function () {
        if ($("#UserType").val() == "2") {
            FillCombo_CatererID();
            $("#CatererID").prop('disabled', false);
        } else {
            $("#CatererID").prop('disabled', true);
            $("#CatererID").val("");
        }
    })

</script>
